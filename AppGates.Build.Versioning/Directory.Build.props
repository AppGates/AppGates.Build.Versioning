<Project>
  <PropertyGroup>

    <!--<GeneratePackageOnBuild>true</GeneratePackageOnBuild>-->
    <PackageOutputPath>$(MSBuildThisFileDirectory)\pack\</PackageOutputPath>

    <!--Opts into the usage of a lock file.-->
    <!--<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>-->
    <!--Enables locked mode for restore. This is useful in CI/CD scenarios where you want repeatable builds.-->
    <RestoreLockedMode>false</RestoreLockedMode>

    <!--Shall keep the floating version upgrade, but doesn't-->
    <RestoreForceEvaluate Condition="'$(RestoreForceEvaluate)' == ''">$(RestoreLockedMode.Equals(false))</RestoreForceEvaluate>
  </PropertyGroup>

  <!--hack to fix not working RestoreForceEvaluate property-->
  <PropertyGroup Condition="'$(RestoreForceEvaluate)' == 'true'">
    <OriginalNugetLockFilePath>$(MSBuildProjectDirectory)\packages.lock.json</OriginalNugetLockFilePath>
    <NuGetLockFilePath>$(OriginalNugetLockFilePath).temp</NuGetLockFilePath>
    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
  </PropertyGroup>

  <Target Name="CopyTempLockFile" BeforeTargets="BeforeBuild" Condition="'$(RestoreForceEvaluate)' == 'true' AND Exists($(NuGetLockFilePath))">
    <Move SourceFiles="$(NuGetLockFilePath)"
          DestinationFiles="$(OriginalNugetLockFilePath)"
          OverwriteReadOnlyFiles="true"/>
  </Target>

  <Target Name="CopyTempLockFile" AfterTargets="ResolvePackageDependenciesDesignTime" Condition="'$(RestoreForceEvaluate)' == 'true' AND Exists($(NuGetLockFilePath))">
    <Move SourceFiles="$(NuGetLockFilePath)"
          DestinationFiles="$(OriginalNugetLockFilePath)"
          OverwriteReadOnlyFiles="true"/>
  </Target>
  <!--end hack to fix not working RestoreForceEvaluate property-->


  <PropertyGroup>
    <!--<GitVersionBaseDirectory>$(MSBuildThisFileDirectory)</GitVersionBaseDirectory>-->
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" Version="*">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup>
    <IsLocalBuild>$(BuildingInsideVisualStudio.ToString().ToLower().Equals('true'))</IsLocalBuild>
  </PropertyGroup>

  <Target Name="CheckForLocalVersionIncrementRequired" BeforeTargets="NBGV_SetDefaults">
    <PropertyGroup>
      <LocalVersionCounterFilePath>$(BaseIntermediateOutputPath)\version_counter.txt</LocalVersionCounterFilePath>
      <LocalVersionIncrementRequiredPath>$(BaseIntermediateOutputPath)\push_required.txt</LocalVersionIncrementRequiredPath>
    </PropertyGroup>
    <CallTarget Targets="IncrementLocalVersion" Condition="Exists('$(LocalVersionIncrementRequiredPath)') OR Exists('LocalVersionCounterFilePath') == false"/>
    
  </Target>

  <Target Name="IncrementLocalVersion">
    <PropertyGroup>
      <LocalBuildId>0</LocalBuildId>
    </PropertyGroup>
    <ReadLinesFromFile Condition="Exists('$(LocalVersionCounterFilePath)')"
               File="$(LocalVersionCounterFilePath)">
      <Output TaskParameter="Lines" PropertyName="LocalBuildId"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <LocalBuildId>$([MSBuild]::Add('$(LocalBuildId)', '1'))</LocalBuildId>
    </PropertyGroup>
    <WriteLinesToFile File="$(LocalVersionCounterFilePath)" Lines="$(LocalBuildId)"  Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>

  <Target Name="CreateOrGetLocalBuildId" AfterTargets="GetBuildVersion" Condition="$(IsLocalBuild)">
    <PropertyGroup>
      <CommitId>$(BuildVersion.Split('-')[0].Split('.')[3])</CommitId>
 </PropertyGroup>

    <ReadLinesFromFile Condition="Exists('$(LocalVersionCounterFilePath)')"
           File="$(LocalVersionCounterFilePath)">
      <Output TaskParameter="Lines" PropertyName="LocalBuildId"/>
    </ReadLinesFromFile>


    <PropertyGroup>
       <LocalBuildVersion>$(BuildVersion.Replace('.$(CommitId)','.$(CommitId)$(LocalBuildId.ToString('0000'))'))</LocalBuildVersion>
       

    </PropertyGroup>
    
    <PropertyGroup>
       <PackageFilePath>$(PackageOutputPath)$(PackageId).$(LocalBuildVersion).nupkg</PackageFilePath>
  
      <PackageExists>false</PackageExists>

      <PackageExists Condition="Exists('$(PackageFilePath)')">true</PackageExists>
      <LocalBuildId Condition="$(PackageExists)">$([MSBuild]::Add('$(LocalBuildId)', '1'))</LocalBuildId>
    </PropertyGroup>
        <Message Importance="high" Text="Checking if package 'file://$(PackageFilePath)' exists..."/>

    <Message Condition="$(PackageExists)" Importance="high" Text="Incremented local build id of '$(MSBuildProjectName)' to '$(LocalBuildId)'"/>
    <WriteLinesToFile File="$(LocalVersionCounterFilePath)" Lines="$(LocalBuildId)"  Overwrite="true" WriteOnlyWhenDifferent="true" />

    <PropertyGroup>
      <LocalBuildVersion>$(BuildVersion.Replace('.$(CommitId)','.$(LocalBuildId)'))</LocalBuildVersion>
   </PropertyGroup>

    <Message Importance="high" Text="Switch local build version of '$(MSBuildProjectName)' from '$(BuildVersion)' to '$(LocalBuildVersion)'"></Message>
    <Message Importance="high" Text="Switch local package version of '$(MSBuildProjectName)' from '$(PackageVersion)' to '$(LocalBuildVersion)'"></Message>

    <PropertyGroup>
      <BuildVersion>$(LocalBuildVersion)</BuildVersion>
      <PackageVersion>$(LocalBuildVersion)</PackageVersion>
      <PackageFilePath>$(PackageOutputPath)$(PackageId).$(LocalBuildVersion).nupkg</PackageFilePath>
    </PropertyGroup>
  
  </Target>

  <PropertyGroup>
    <!--<GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);IncrementLocalBuildIdOnPack</GenerateNuspecDependsOn>-->
  </PropertyGroup>

  <!--<Target Name="TestIssueTarget" AfterTargets="GenerateNuspec">
      <Message Text="TestIssueTarget was executed"></Message>
    </Target>-->

  <!--<Target Name="BuildPackageFilePath" BeforeTargets="GenerateNuspec">
    <PropertyGroup>
      <PackageFilePath>$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg</PackageFilePath>
    </PropertyGroup>
  </Target>-->





  <!--<Target Name="IncrementLocalBuildIdAfterSuccessfulPack" AfterTargets="GenerateNuspec" Condition="Exists('$(PackageFilePath)')" >
    <PropertyGroup>
      <VersionContent></VersionContent>
      <VersionFilePath>$(MSBuildProjectDirectory)\version.json</VersionFilePath>
    </PropertyGroup>

    <PropertyGroup>
      <NextLocalBuildId>$([MSBuild]::Add('$(LocalBuildId)', '1'))</NextLocalBuildId>
    </PropertyGroup>

    <Message Importance="high"  Text="PackagePath: file://$(PackageFilePath)"></Message>
    <Message Importance="high"  Text="Increment local build id of '$(MSBuildProjectName)' to '$(NextLocalBuildId)'"></Message>

    <WriteLinesToFile File="$(LocalVersionCounterFilePath)"
                      Lines="$(NextLocalBuildId)" Overwrite="true" WriteOnlyWhenDifferent="true"/>

  </Target>-->


</Project>